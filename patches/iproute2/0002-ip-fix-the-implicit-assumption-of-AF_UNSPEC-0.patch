From a42738288a7c5158f7b64edc9e787c2114a0c95a Mon Sep 17 00:00:00 2001
From: no92 <no92.mail@gmail.com>
Date: Tue, 28 Mar 2023 23:05:38 +0200
Subject: [PATCH 2/2] ip: fix the implicit assumption of AF_UNSPEC == 0

Currently, some instances implicitly assume ABI by doing `if(family)`
instead of `if(family = AF_UNSPEC)`. This patch fixes all instances of
this that I found, which I then validated by grepping.
---
 ip/ipaddress.c   |  6 +++---
 ip/ipmaddr.c     |  2 +-
 ip/ipneigh.c     |  4 ++--
 ip/ipnetconf.c   |  2 +-
 ip/iproute.c     |  4 ++--
 ip/iprule.c      |  4 ++--
 ip/ipxfrm.c      |  4 ++--
 ip/tcp_metrics.c | 18 +++++++++---------
 8 files changed, 22 insertions(+), 22 deletions(-)

diff --git a/ip/ipaddress.c b/ip/ipaddress.c
index c7553bcd..38d7cf63 100644
--- a/ip/ipaddress.c
+++ b/ip/ipaddress.c
@@ -1554,7 +1554,7 @@ int print_addrinfo(struct nlmsghdr *n, void *arg)
 	if ((filter.flags ^ ifa_flags) & filter.flagmask)
 		return 0;
 
-	if (filter.family && filter.family != ifa->ifa_family)
+	if (filter.family != AF_UNSPEC && filter.family != ifa->ifa_family)
 		return 0;
 
 	if (ifa_label_match_rta(ifa->ifa_index, rta_tb[IFA_LABEL]))
@@ -1725,7 +1725,7 @@ static int print_selected_addrinfo(struct ifinfomsg *ifi,
 			return -1;
 
 		if (ifa->ifa_index != ifi->ifi_index ||
-		    (filter.family && filter.family != ifa->ifa_family))
+		    (filter.family != AF_UNSPEC && filter.family != ifa->ifa_family))
 			continue;
 
 		if (filter.up && !(ifi->ifi_flags&IFF_UP))
@@ -1906,7 +1906,7 @@ static void ipaddr_filter(struct nlmsg_chain *linfo, struct nlmsg_chain *ainfo)
 			if (ifa->ifa_index != ifi->ifi_index)
 				continue;
 			missing_net_address = 0;
-			if (filter.family && filter.family != ifa->ifa_family)
+			if (filter.family != AF_UNSPEC && filter.family != ifa->ifa_family)
 				continue;
 			if ((filter.scope^ifa->ifa_scope)&filter.scopemask)
 				continue;
diff --git a/ip/ipmaddr.c b/ip/ipmaddr.c
index f8d6b992..ce8ae135 100644
--- a/ip/ipmaddr.c
+++ b/ip/ipmaddr.c
@@ -256,7 +256,7 @@ static int multiaddr_list(int argc, char **argv)
 {
 	struct ma_info *list = NULL;
 
-	if (!filter.family)
+	if (filter.family == AF_UNSPEC)
 		filter.family = preferred_family;
 
 	while (argc > 0) {
diff --git a/ip/ipneigh.c b/ip/ipneigh.c
index ee14ffcc..8f9174dc 100644
--- a/ip/ipneigh.c
+++ b/ip/ipneigh.c
@@ -327,7 +327,7 @@ int print_neigh(struct nlmsghdr *n, void *arg)
 	if (filter.flushb && n->nlmsg_type != RTM_NEWNEIGH)
 		return 0;
 
-	if (filter.family && filter.family != r->ndm_family)
+	if (filter.family != AF_UNSPEC && filter.family != r->ndm_family)
 		return 0;
 	if (filter.index && filter.index != r->ndm_ifindex)
 		return 0;
@@ -506,7 +506,7 @@ static int do_show_or_flush(int argc, char **argv, int flush)
 
 	ipneigh_reset_filter(0);
 
-	if (!filter.family)
+	if (filter.family == AF_UNSPEC)
 		filter.family = preferred_family;
 
 	if (flush) {
diff --git a/ip/ipnetconf.c b/ip/ipnetconf.c
index 7ddaefb4..3483a4a5 100644
--- a/ip/ipnetconf.c
+++ b/ip/ipnetconf.c
@@ -66,7 +66,7 @@ int print_netconf(struct rtnl_ctrl_data *ctrl, struct nlmsghdr *n, void *arg)
 		return -1;
 	}
 
-	if (filter.family && filter.family != ncm->ncm_family)
+	if (filter.family != AF_UNSPEC && filter.family != ncm->ncm_family)
 		return 0;
 
 	parse_rtattr(tb, NETCONFA_MAX, netconf_rta(ncm),
diff --git a/ip/iproute.c b/ip/iproute.c
index a7cd9543..0eb573f5 100644
--- a/ip/iproute.c
+++ b/ip/iproute.c
@@ -287,9 +287,9 @@ static int filter_nlmsg(struct nlmsghdr *n, struct rtattr **tb, int host_len)
 	    inet_addr_match(&src, &filter.msrc, r->rtm_src_len))
 		return 0;
 
-	if (filter.rvia.family && inet_addr_match(&via, &filter.rvia, filter.rvia.bitlen))
+	if (filter.rvia.family != AF_UNSPEC && inet_addr_match(&via, &filter.rvia, filter.rvia.bitlen))
 		return 0;
-	if (filter.rprefsrc.family && inet_addr_match(&prefsrc, &filter.rprefsrc, filter.rprefsrc.bitlen))
+	if (filter.rprefsrc.family != AF_UNSPEC && inet_addr_match(&prefsrc, &filter.rprefsrc, filter.rprefsrc.bitlen))
 		return 0;
 	if (filter.realmmask) {
 		__u32 realms = 0;
diff --git a/ip/iprule.c b/ip/iprule.c
index 458607ef..41824681 100644
--- a/ip/iprule.c
+++ b/ip/iprule.c
@@ -102,7 +102,7 @@ static bool filter_nlmsg(struct nlmsghdr *n, struct rtattr **tb, int host_len)
 	if (filter.not && !(frh->flags & FIB_RULE_INVERT))
 		return false;
 
-	if (filter.src.family) {
+	if (filter.src.family != AF_UNSPEC) {
 		inet_prefix *f_src = &filter.src;
 
 		if (f_src->family != frh->family ||
@@ -113,7 +113,7 @@ static bool filter_nlmsg(struct nlmsghdr *n, struct rtattr **tb, int host_len)
 			return false;
 	}
 
-	if (filter.dst.family) {
+	if (filter.dst.family != AF_UNSPEC) {
 		inet_prefix *f_dst = &filter.dst;
 
 		if (f_dst->family != frh->family ||
diff --git a/ip/ipxfrm.c b/ip/ipxfrm.c
index b78c712d..f36c9c0f 100644
--- a/ip/ipxfrm.c
+++ b/ip/ipxfrm.c
@@ -1151,7 +1151,7 @@ int xfrm_id_parse(xfrm_address_t *saddr, struct xfrm_id *id, __u16 *family,
 		NEXT_ARG();
 	}
 
-	if (src.family && dst.family && (src.family != dst.family))
+	if (src.family != AF_UNSPEC && dst.family != AF_UNSPEC && (src.family != dst.family))
 		invarg("the same address family is required between values after \"src\" and \"dst\"", *argv);
 
 	if (id->spi && id->proto) {
@@ -1462,7 +1462,7 @@ int xfrm_selector_parse(struct xfrm_selector *sel, int *argcp, char ***argvp)
 		NEXT_ARG();
 	}
 
-	if (src.family && dst.family && (src.family != dst.family))
+	if (src.family != AF_UNSPEC && dst.family != AF_UNSPEC && (src.family != dst.family))
 		invarg("the same address family is required between values after \"src\" and \"dst\"", *argv);
 
 	if (argc == *argcp)
diff --git a/ip/tcp_metrics.c b/ip/tcp_metrics.c
index 9c8fb072..8ed96d5c 100644
--- a/ip/tcp_metrics.c
+++ b/ip/tcp_metrics.c
@@ -179,13 +179,13 @@ static int process_msg(struct nlmsghdr *n, void *arg)
 		     len);
 
 	if (attrs[TCP_METRICS_ATTR_ADDR_IPV4]) {
-		if (f.daddr.family && f.daddr.family != AF_INET)
+		if (f.daddr.family != AF_UNSPEC && f.daddr.family != AF_INET)
 			return 0;
 		a = attrs[TCP_METRICS_ATTR_ADDR_IPV4];
 		daddr.family = AF_INET;
 		atype = TCP_METRICS_ATTR_ADDR_IPV4;
 	} else if (attrs[TCP_METRICS_ATTR_ADDR_IPV6]) {
-		if (f.daddr.family && f.daddr.family != AF_INET6)
+		if (f.daddr.family != AF_UNSPEC && f.daddr.family != AF_INET6)
 			return 0;
 		a = attrs[TCP_METRICS_ATTR_ADDR_IPV6];
 		daddr.family = AF_INET6;
@@ -197,18 +197,18 @@ static int process_msg(struct nlmsghdr *n, void *arg)
 	if (get_addr_rta(&daddr, a, daddr.family))
 		return 0;
 
-	if (f.daddr.family && f.daddr.bitlen >= 0 &&
+	if (f.daddr.family != AF_UNSPEC && f.daddr.bitlen >= 0 &&
 	    inet_addr_match(&daddr, &f.daddr, f.daddr.bitlen))
 		return 0;
 
 	if (attrs[TCP_METRICS_ATTR_SADDR_IPV4]) {
-		if (f.saddr.family && f.saddr.family != AF_INET)
+		if (f.saddr.family != AF_UNSPEC && f.saddr.family != AF_INET)
 			return 0;
 		a = attrs[TCP_METRICS_ATTR_SADDR_IPV4];
 		saddr.family = AF_INET;
 		stype = TCP_METRICS_ATTR_SADDR_IPV4;
 	} else if (attrs[TCP_METRICS_ATTR_SADDR_IPV6]) {
-		if (f.saddr.family && f.saddr.family != AF_INET6)
+		if (f.saddr.family != AF_UNSPEC && f.saddr.family != AF_INET6)
 			return 0;
 		a = attrs[TCP_METRICS_ATTR_SADDR_IPV6];
 		saddr.family = AF_INET6;
@@ -219,11 +219,11 @@ static int process_msg(struct nlmsghdr *n, void *arg)
 	}
 
 	/* Only get/check for the source-address if the kernel supports it. */
-	if (saddr.family) {
+	if (saddr.family != AF_UNSPEC) {
 		if (get_addr_rta(&saddr, a, saddr.family))
 			return 0;
 
-		if (f.saddr.family && f.saddr.bitlen >= 0 &&
+		if (f.saddr.family != AF_UNSPEC && f.saddr.bitlen >= 0 &&
 		    inet_addr_match(&saddr, &f.saddr, f.saddr.bitlen))
 			return 0;
 	}
@@ -235,7 +235,7 @@ static int process_msg(struct nlmsghdr *n, void *arg)
 
 		addattr_l(&req2.n, sizeof(req2), atype, daddr.data,
 			  daddr.bytelen);
-		if (saddr.family)
+		if (saddr.family != AF_UNSPEC)
 			addattr_l(&req2.n, sizeof(req2), stype, saddr.data,
 				  saddr.bytelen);
 
@@ -324,7 +324,7 @@ static int process_msg(struct nlmsghdr *n, void *arg)
 			     " fo_cookie %s", cookie);
 	}
 
-	if (saddr.family) {
+	if (saddr.family != AF_UNSPEC) {
 		const char *src;
 
 		src = format_host(saddr.family, saddr.bytelen, saddr.data);
-- 
2.39.2

