From 643e8df1c8d37019b31eabdb7be54c20623f73bf Mon Sep 17 00:00:00 2001
From: no92 <no92.mail@gmail.com>
Date: Sun, 31 Mar 2024 15:48:04 +0200
Subject: [PATCH 1/4] compiler: Add `x86_64-unknown-managarm-mlibc` target

---
 .../src/spec/base/managarm_mlibc.rs           | 35 +++++++++++++++++++
 compiler/rustc_target/src/spec/base/mod.rs    |  1 +
 compiler/rustc_target/src/spec/mod.rs         |  2 ++
 .../targets/x86_64_unknown_managarm_mlibc.rs  | 19 ++++++++++
 src/tools/build-manifest/src/main.rs          |  1 +
 5 files changed, 58 insertions(+)
 create mode 100644 compiler/rustc_target/src/spec/base/managarm_mlibc.rs
 create mode 100644 compiler/rustc_target/src/spec/targets/x86_64_unknown_managarm_mlibc.rs

diff --git a/compiler/rustc_target/src/spec/base/managarm_mlibc.rs b/compiler/rustc_target/src/spec/base/managarm_mlibc.rs
new file mode 100644
index 00000000..b694a946
--- /dev/null
+++ b/compiler/rustc_target/src/spec/base/managarm_mlibc.rs
@@ -0,0 +1,35 @@
+use crate::spec::{Cc, cvs, LinkArgs, LinkerFlavor, Lld, RelroLevel, TargetOptions};
+
+pub fn opts() -> TargetOptions {
+    let mut args = LinkArgs::new();
+    args.insert(
+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),
+        vec![
+            // We want to be able to strip as much executable code as possible
+            // from the linker command line, and this flag indicates to the
+            // linker that it can avoid linking in dynamic libraries that don't
+            // actually satisfy any symbols up to that point (as with many other
+            // resolutions the linker does). This option only applies to all
+            // following libraries so we're sure to pass it as one of the first
+            // arguments.
+            "-Wl,--as-needed".to_string().into(),
+            // Always enable NX protection when it is available
+            "-Wl,-z,noexecstack".to_string().into(),
+        ],
+    );
+
+    TargetOptions {
+        os: "managarm".to_string().into(),
+        env: "mlibc".to_string().into(),
+        dynamic_linking: true,
+        executables: true,
+        families: cvs!["unix"],
+        has_rpath: true,
+        pre_link_args: args,
+        position_independent_executables: true,
+        relro_level: RelroLevel::Full,
+        has_thread_local: true,
+        crt_static_respected: true,
+        ..Default::default()
+    }
+}
diff --git a/compiler/rustc_target/src/spec/base/mod.rs b/compiler/rustc_target/src/spec/base/mod.rs
index d137aaa5..c32dc591 100644
--- a/compiler/rustc_target/src/spec/base/mod.rs
+++ b/compiler/rustc_target/src/spec/base/mod.rs
@@ -17,6 +17,7 @@
 pub(crate) mod linux_musl;
 pub(crate) mod linux_ohos;
 pub(crate) mod linux_uclibc;
+pub(crate) mod managarm_mlibc;
 pub(crate) mod msvc;
 pub(crate) mod netbsd;
 pub(crate) mod nto_qnx;
diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index 6c698c5b..ace18ec1 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -1521,6 +1521,8 @@ fn $module() {
     ("aarch64-unknown-redox", aarch64_unknown_redox),
     ("x86_64-unknown-redox", x86_64_unknown_redox),
 
+    ("x86_64-unknown-managarm-mlibc", x86_64_unknown_managarm_mlibc),
+
     ("i386-apple-ios", i386_apple_ios),
     ("x86_64-apple-ios", x86_64_apple_ios),
     ("aarch64-apple-ios", aarch64_apple_ios),
diff --git a/compiler/rustc_target/src/spec/targets/x86_64_unknown_managarm_mlibc.rs b/compiler/rustc_target/src/spec/targets/x86_64_unknown_managarm_mlibc.rs
new file mode 100644
index 00000000..f0f7a069
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_managarm_mlibc.rs
@@ -0,0 +1,19 @@
+use crate::spec::{base, Cc, LinkerFlavor, Lld, StackProbeType, Target};
+
+pub fn target() -> Target {
+    let mut base = base::managarm_mlibc::opts();
+    base.cpu = "x86-64".to_string().into();
+    base.max_atomic_width = Some(64);
+    base.pre_link_args.get_mut(&LinkerFlavor::Gnu(Cc::Yes, Lld::No)).unwrap().push("-m64".to_string().into());
+    // don't use probe-stack=inline-asm until rust-lang/rust#83139 is resolved.
+    base.stack_probes = StackProbeType::Call;
+
+    Target {
+        llvm_target: "x86_64-unknown-managarm-mlibc".to_string().into(),
+        pointer_width: 64,
+        data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
+            .to_string().into(),
+        arch: "x86_64".to_string().into(),
+        options: base
+    }
+}
diff --git a/src/tools/build-manifest/src/main.rs b/src/tools/build-manifest/src/main.rs
index 1ef8cf7d..7d9b3d0a 100644
--- a/src/tools/build-manifest/src/main.rs
+++ b/src/tools/build-manifest/src/main.rs
@@ -160,6 +160,7 @@
     "x86_64-unknown-linux-gnu",
     "x86_64-unknown-linux-gnux32",
     "x86_64-unknown-linux-musl",
+    "x86_64-unknown-managarm-mlibc",
     "x86_64-unknown-netbsd",
     "x86_64-unknown-none",
     "x86_64-unknown-redox",
-- 
2.44.0

