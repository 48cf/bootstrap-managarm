From ed39cd2215768b99e5fc839bc482bbc472e801d4 Mon Sep 17 00:00:00 2001
From: Dennis Bonke <admin@dennisbonke.com>
Date: Fri, 1 Sep 2023 17:16:41 +0200
Subject: [PATCH 2/2] managarm: fix build target in x.py and bootstrap

Signed-off-by: Dennis Bonke <admin@dennisbonke.com>
---
 src/bootstrap/bootstrap.py | 10 +++++++---
 src/bootstrap/builder.rs   |  6 ++++--
 2 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/src/bootstrap/bootstrap.py b/src/bootstrap/bootstrap.py
index 149350e6..75a50b67 100644
--- a/src/bootstrap/bootstrap.py
+++ b/src/bootstrap/bootstrap.py
@@ -860,7 +860,7 @@ class RustBuild(object):
         ... "debug", "bootstrap")
         True
         """
-        return os.path.join(self.build_dir, "bootstrap", "debug", "bootstrap")
+        return os.path.join(self.build_dir, "bootstrap", self.build, "debug", "bootstrap")
 
     def build_bootstrap(self):
         """Build bootstrap"""
@@ -871,6 +871,10 @@ class RustBuild(object):
             print("Building bootstrap", file=sys.stderr)
 
         args = self.build_bootstrap_cmd(env)
+
+        args.append("--target")
+        args.append(self.build)
+
         # Run this from the source directory so cargo finds .cargo/config
         run(args, env=env, verbose=self.verbose, cwd=self.rust_root)
 
@@ -882,7 +886,7 @@ class RustBuild(object):
         build_dir = os.path.join(self.build_dir, "bootstrap")
         if self.clean and os.path.exists(build_dir):
             shutil.rmtree(build_dir)
-        # `CARGO_BUILD_TARGET` breaks bootstrap build.
+        # `CARGO_BUILD_TARGET` and `build.target` breaks bootstrap build.
         # See also: <https://github.com/rust-lang/rust/issues/70208>.
         if "CARGO_BUILD_TARGET" in env:
             del env["CARGO_BUILD_TARGET"]
@@ -930,7 +934,7 @@ class RustBuild(object):
         target_linker = self.get_toml("linker", build_section)
         if target_linker is not None:
             env["RUSTFLAGS"] += " -C linker=" + target_linker
-        env["RUSTFLAGS"] += " -Wrust_2018_idioms -Wunused_lifetimes"
+        # env["RUSTFLAGS"] += " -Wrust_2018_idioms -Wunused_lifetimes"
         if self.warnings == "default":
             deny_warnings = self.get_toml("deny-warnings", "rust") != "false"
         else:
diff --git a/src/bootstrap/builder.rs b/src/bootstrap/builder.rs
index 05b66f94..68034e06 100644
--- a/src/bootstrap/builder.rs
+++ b/src/bootstrap/builder.rs
@@ -1546,6 +1546,8 @@ pub fn cargo(
             self.clear_if_dirty(&out_dir, &self.rustc(compiler));
         }
 
+        let artifact_dir = self.out.join("bootstrap/").join(self.build.build.triple).join("debug/");
+
         // Customize the compiler we're running. Specify the compiler to cargo
         // as our shim and then pass it some various options used to configure
         // how the actual compiler itself is called.
@@ -1558,7 +1560,7 @@ pub fn cargo(
             .env("RUSTC_STAGE", stage.to_string())
             .env("RUSTC_SYSROOT", &sysroot)
             .env("RUSTC_LIBDIR", &libdir)
-            .env("RUSTDOC", self.bootstrap_out.join("rustdoc"))
+            .env("RUSTDOC", artifact_dir.join("rustdoc"))
             .env(
                 "RUSTDOC_REAL",
                 if cmd == "doc" || cmd == "rustdoc" || (cmd == "test" && want_rustdoc) {
@@ -1572,7 +1574,7 @@ pub fn cargo(
         // Clippy support is a hack and uses the default `cargo-clippy` in path.
         // Don't override RUSTC so that the `cargo-clippy` in path will be run.
         if cmd != "clippy" {
-            cargo.env("RUSTC", self.bootstrap_out.join("rustc"));
+            cargo.env("RUSTC", artifact_dir.join("rustc"));
         }
 
         // Dealing with rpath here is a little special, so let's go into some
-- 
2.42.0

