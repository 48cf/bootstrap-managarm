From f5f7f9c127a46ca699b55e68cca654f3e605a165 Mon Sep 17 00:00:00 2001
From: Matt Taylor <mstaveleytaylor@gmail.com>
Date: Mon, 31 May 2021 21:19:44 +0100
Subject: [PATCH 2/3] managarm: fix build target in x.py and bootstrap

---
 compiler/rustc_target/src/spec/managarm_system_base.rs | 2 +-
 library/std/src/sys/unix/fs.rs                         | 4 ++--
 src/bootstrap/bootstrap.py                             | 8 ++++++--
 src/bootstrap/builder.rs                               | 6 ++++--
 4 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/compiler/rustc_target/src/spec/managarm_system_base.rs b/compiler/rustc_target/src/spec/managarm_system_base.rs
index 08b7d8a8..cec689f1 100644
--- a/compiler/rustc_target/src/spec/managarm_system_base.rs
+++ b/compiler/rustc_target/src/spec/managarm_system_base.rs
@@ -22,7 +22,7 @@ pub fn opts() -> TargetOptions {
         os: "managarm".to_string(),
         dynamic_linking: true,
         executables: true,
-        os_family: Some("unix".to_string()),
+        families: vec!["unix".to_string()],
         linker_is_gnu: true,
         has_rpath: true,
         pre_link_args: args,
diff --git a/library/std/src/sys/unix/fs.rs b/library/std/src/sys/unix/fs.rs
index e9b4310e..9effc7c8 100644
--- a/library/std/src/sys/unix/fs.rs
+++ b/library/std/src/sys/unix/fs.rs
@@ -612,7 +612,7 @@ pub fn file_type(&self) -> io::Result<FileType> {
         target_os = "fuchsia",
         target_os = "redox",
         target_os = "vxworks",
-        target_os = "espidf"
+        target_os = "espidf",
         target_os = "managarm"
     ))]
     pub fn ino(&self) -> u64 {
@@ -653,7 +653,7 @@ fn name_bytes(&self) -> &[u8] {
         target_os = "l4re",
         target_os = "haiku",
         target_os = "vxworks",
-        target_os = "espidf"
+        target_os = "espidf",
         target_os = "managarm"
     ))]
     fn name_bytes(&self) -> &[u8] {
diff --git a/src/bootstrap/bootstrap.py b/src/bootstrap/bootstrap.py
index 0170be96..5a93849a 100644
--- a/src/bootstrap/bootstrap.py
+++ b/src/bootstrap/bootstrap.py
@@ -910,7 +910,7 @@ class RustBuild(object):
         ... "debug", "bootstrap")
         True
         """
-        return os.path.join(self.build_dir, "bootstrap", "debug", "bootstrap")
+        return os.path.join(self.build_dir, "bootstrap", self.build, "debug", "bootstrap")
 
     def build_bootstrap(self):
         """Build bootstrap"""
@@ -918,7 +918,7 @@ class RustBuild(object):
         if self.clean and os.path.exists(build_dir):
             shutil.rmtree(build_dir)
         env = os.environ.copy()
-        # `CARGO_BUILD_TARGET` breaks bootstrap build.
+        # `CARGO_BUILD_TARGET` and 'build.target' break bootstrap build.
         # See also: <https://github.com/rust-lang/rust/issues/70208>.
         if "CARGO_BUILD_TARGET" in env:
             del env["CARGO_BUILD_TARGET"]
@@ -965,6 +965,10 @@ class RustBuild(object):
             args.append("--locked")
         if self.use_vendored_sources:
             args.append("--frozen")
+
+        args.append("--target")
+        args.append(self.build)
+
         run(args, env=env, verbose=self.verbose)
 
     def build_triple(self):
diff --git a/src/bootstrap/builder.rs b/src/bootstrap/builder.rs
index 6750f7a5..1f839cf5 100644
--- a/src/bootstrap/builder.rs
+++ b/src/bootstrap/builder.rs
@@ -1092,6 +1092,8 @@ pub fn cargo(
             self.clear_if_dirty(&out_dir, &self.rustc(compiler));
         }
 
+        let artifact_dir = self.out.join("bootstrap/").join(self.build.build.triple).join("debug/");
+
         // Customize the compiler we're running. Specify the compiler to cargo
         // as our shim and then pass it some various options used to configure
         // how the actual compiler itself is called.
@@ -1104,7 +1106,7 @@ pub fn cargo(
             .env("RUSTC_STAGE", stage.to_string())
             .env("RUSTC_SYSROOT", &sysroot)
             .env("RUSTC_LIBDIR", &libdir)
-            .env("RUSTDOC", self.out.join("bootstrap/debug/rustdoc"))
+            .env("RUSTDOC", artifact_dir.join("rustdoc"))
             .env(
                 "RUSTDOC_REAL",
                 if cmd == "doc" || cmd == "rustdoc" || (cmd == "test" && want_rustdoc) {
@@ -1118,7 +1120,7 @@ pub fn cargo(
         // Clippy support is a hack and uses the default `cargo-clippy` in path.
         // Don't override RUSTC so that the `cargo-clippy` in path will be run.
         if cmd != "clippy" {
-            cargo.env("RUSTC", self.out.join("bootstrap/debug/rustc"));
+            cargo.env("RUSTC", artifact_dir.join("rustc"));
         }
 
         // Dealing with rpath here is a little special, so let's go into some
-- 
2.35.1

